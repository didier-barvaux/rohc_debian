.\" File automatically generated by doxy2man0.1
.\" Generation date: dim. sept. 7 2014
.TH rohc_comp_set_traces_cb2 3 2014-09-07 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc_comp_set_traces_cb2 \- Set the callback function used to manage traces in compressor.
.SH SYNOPSIS
.nf
.B #include <rohc/rohc_comp.h>
.sp
\fBbool rohc_comp_set_traces_cb2\fP(
    \fBstruct rohc_comp *const  comp\fP,
    \fBrohc_trace_callback2_t   callback\fP,
    \fBvoid *const              priv_ctxt\fP
);
.fi
.SH DESCRIPTION
.PP 
Set the user-defined callback function used to manage traces in the compressor.
.PP 
The function will be called by the ROHC library every time it wants to print something related to compression, from errors to debug. User may thus decide what traces are interesting (filter on \fBlevel\fP, source \fBentity\fP, or \fBprofile\fP) and what to do with them (print on console, storage in file, syslog...).
.SH PARAMETERS
.TP
.B comp
The ROHC compressor 
.TP
.B callback
Two possible cases: 
.RS

\(bu The callback function used to manage traces 

\(bu NULL to remove the previous callback 


.RE
.TP
.B priv_ctxt
An optional private context, may be NULL 
.SH STRUCTURES
.SH RETURN VALUE
.PP
true on success, false otherwise
.SH NOTES
.PP
The callback can not be modified after library initialization
.SH EXAMPLE
.nf
/**
 * @brief Callback to print traces of the ROHC library
 *
 * @param priv_ctxt  An optional private context, may be NULL
 * @param level      The priority level of the trace
 * @param entity     The entity that emitted the trace among:
 *                    \li ROHC_TRACE_COMP
 *                    \li ROHC_TRACE_DECOMP
 * @param profile    The ID of the ROHC compression/decompression profile
 *                   the trace is related to
 * @param format     The format string of the trace
 */
static void print_rohc_traces(void *const priv_ctxt,
                              const rohc_trace_level_t level,
                              const rohc_trace_entity_t entity,
                              const int profile,
                              const char *const format,
                              ...)
{
        va_list args;
        va_start(args, format);
        vfprintf(stdout, format, args);
        va_end(args);
}
        ...
        struct rohc_comp *compressor;           /* the ROHC compressor */
        ...
        compressor = rohc_comp_new2(ROHC_SMALL_CID, ROHC_SMALL_CID_MAX,
                                    gen_random_num, NULL);
        if(compressor == NULL)
        {
                fprintf(stderr, "failed create the ROHC compressor\n");
                goto error;
        }
        ...
        if(!rohc_comp_set_traces_cb2(compressor, print_rohc_traces, NULL))
        {
                fprintf(stderr, "failed to set the callback for traces on "
                        "compressor\n");
                goto release_compressor;
        }
        ...
        rohc_comp_free(compressor);



.fi
.SH SEE ALSO
.BR rohc_comp.h (3)
