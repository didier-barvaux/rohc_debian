.\" File automatically generated by doxy2man0.1
.\" Generation date: dim. juin 19 2016
.TH rohc_compress4 3 2016-06-19 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc_compress4 \- Compress the given uncompressed packet into a ROHC packet.
.SH SYNOPSIS
.nf
.B #include <rohc/rohc_comp.h>
.sp
\fBrohc_status_t rohc_compress4\fP(
    \fBstruct rohc_comp *const  comp\fP,
    \fBconst struct rohc_buf    uncomp_packet\fP,
    \fBstruct rohc_buf *const   rohc_packet\fP
);
.fi
.SH DESCRIPTION
.PP 
Compress the given uncompressed packet into a ROHC packet. The compression may succeed into two different ways: 
.PP 
.RS
.PP 
\(bu return \fBROHC_STATUS_OK\fP and a full ROHC packet, 
.PP 
\(bu return \fBROHC_STATUS_SEGMENT\fP and no ROHC data if ROHC segmentation is required.
.PP 
.RE
.PP 
Notes: 
.PP 
.RS
.PP 
\(bu ROHC segmentation: The ROHC compressor has to use ROHC segmentation if the output buffer rohc_packet was too small for the compressed ROHC packet and if the Maximum Reconstructed Reception Unit (MRRU) configured with the function \fBrohc_comp_set_mrru\fP was not exceeded. If ROHC segmentation is used, one may use the \fBrohc_comp_get_segment2\fP function to retrieve all the ROHC segments one by one. 
.PP 
\(bu Time\-related features in the ROHC protocol: Set the \fBuncomp_packet.time\fP parameter to 0 if arrival time of the uncompressed packet is unknown or to disable the time\-related features in the ROHC protocol.
.PP 
.RE
.SH PARAMETERS
.TP
.B comp
The ROHC compressor 
.TP
.B uncomp_packet
The uncompressed packet to compress 
.TP
.B rohc_packet [output]
The resulting compressed ROHC packet 
.SH STRUCTURES
.SS "A network buffer for the ROHC library"
.PP
.sp
.PP 
May represent one uncompressed packet, one ROHC packet, or a ROHC feedback.
.PP 
The network buffer does not contain the packet data itself. It only has a pointer on it. This is designed this way for performance reasons: no copy required to initialize a network buffer, the struct is small and may be passed as copy to function.
.PP 
The network buffer is able to keep some free space at its beginning. The unused space at the beginning of the buffer may be used to prepend a network header at the very end of the packet handling.
.PP 
The beginning of the network buffer may also be shifted forward with the \fBrohc_buf_pull\fP function or shifted backward with the \fBrohc_buf_push\fP function. This is useful when parsing a network packet (once bytes are read, shift them forward) for example.
.PP 
The network buffer may be initialized manually (see below) or with the helper functions \fBrohc_buf_init_empty\fP or \fBrohc_buf_init_full\fP...
.PP 
 
.sp
.RS
.nf
struct \fBrohc_buf\fP {
  struct rohc_ts \fItime\fP;    /* The timestamp associated to the data */
  uint8_t       *\fIdata\fP;    /* The buffer data */
  size_t         \fImax_len\fP; /* The maximum length of the buffer */
  size_t         \fIoffset\fP;  /* The offset for the beginning of the data */
  size_t         \fIlen\fP;     /* The data length (in bytes) */
};
.fi
.RE
.SH RETURN VALUE
.PP
Possible return values: 
.RS

\(bu \fBROHC_STATUS_OK\fP if a ROHC packet is returned 

\(bu \fBROHC_STATUS_SEGMENT\fP if no ROHC data is returned and ROHC segments can be retrieved with successive calls to \fBrohc_comp_get_segment2\fP 

\(bu \fBROHC_STATUS_OUTPUT_TOO_SMALL\fP if the output buffer is too small for the compressed packet 

\(bu \fBROHC_STATUS_ERROR\fP if an error occurred


.RE


.SH EXAMPLE
.nf
struct rohc_comp *compressor;           /* the ROHC compressor */
/* the buffer that will contain the IPv4 packet to compress */
unsigned char ip_buffer[BUFFER_SIZE];
struct rohc_buf ip_packet = rohc_buf_init_empty(ip_buffer, BUFFER_SIZE);
/* the buffer that will contain the resulting ROHC packet */
unsigned char rohc_buffer[BUFFER_SIZE];
struct rohc_buf rohc_packet = rohc_buf_init_empty(rohc_buffer, BUFFER_SIZE);

status = rohc_compress4(compressor, ip_packet, &rohc_packet);
if(status == ROHC_STATUS_SEGMENT)
{
        /* success: compression succeeded, but resulting ROHC packet was too
         * large for the Maximum Reconstructed Reception Unit (MRRU) configured
         * with rohc_comp_set_mrru, the rohc_packet buffer contains the
         * first ROHC segment and rohc_comp_get_segment can be used to
         * retrieve the next ones. */

}
else if(status == ROHC_STATUS_OK)
{
        /* success: compression succeeded, and resulting ROHC packet fits the
         * Maximum Reconstructed Reception Unit (MRRU) configured with
         * rohc_comp_set_mrru, the rohc_packet buffer contains the
         * rohc_packet_len bytes of the ROHC packet */

}
else
{
        /* compressor failed to compress the IP packet */

}




.fi
.SH SEE ALSO
.BR rohc_comp.h (3),
.BR ROHC_STATUS_OK (3),
.BR ROHC_STATUS_SEGMENT (3),
.BR rohc_comp_set_mrru (3),
.BR rohc_comp_get_segment2 (3),
.BR ROHC_STATUS_OUTPUT_TOO_SMALL (3),
.BR ROHC_STATUS_ERROR (3)
