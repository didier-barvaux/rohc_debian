.\" File automatically generated by doxy2man0.1
.\" Generation date: dim. sept. 7 2014
.TH rohc_decomp.h 3 2014-09-07 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc_decomp.h \- The ROHC decompression API
.SH SYNOPSIS
.nf
.B #include <rohc/rohc_decomp.h>
.fi
.SH DESCRIPTION
.PP 
The decompression API of the ROHC library allows a program to decompress some ROHC packets into uncompressed packets.
.PP 
The program shall first create a decompressor context and configure it. It then may decompress as many packets as needed. When done, the ROHC decompressor context shall be destroyed. 
.PP
.sp
.RS
.nf
\fB
struct rohc_decomp  *rohc_decomp_new2(const rohc_cid_type_t cid_type,
                                      const rohc_cid_t max_cid,
                                      const rohc_mode_t mode);
void                 rohc_decomp_free(struct rohc_decomp *const decomp);
rohc_status_t        rohc_decompress3(struct rohc_decomp *const decomp,
                                      const struct rohc_buf rohc_packet,
                                      struct rohc_buf *const uncomp_packet,
                                      struct rohc_buf *const rcvd_feedback,
                                      struct rohc_buf *const feedback_send);
const char          *rohc_decomp_get_state_descr(const rohc_decomp_state_t state);
bool                 rohc_decomp_get_last_packet_info(const struct rohc_decomp *const decomp,
                                                      rohc_decomp_last_packet_info_t *const info);
bool                 rohc_decomp_get_general_info(const struct rohc_decomp *const decomp,
                                                  rohc_decomp_general_info_t *const info);
bool                 rohc_decomp_get_cid_type(const struct rohc_decomp *const decomp,
                                              rohc_cid_type_t *const cid_type);
bool                 rohc_decomp_get_max_cid(const struct rohc_decomp *const decomp,
                                             size_t *const max_cid);
bool                 rohc_decomp_set_mrru(struct rohc_decomp *const decomp,
                                          const size_t mrru);
bool                 rohc_decomp_get_mrru(const struct rohc_decomp *const decomp,
                                          size_t *const mrru);
bool                 rohc_decomp_set_features(struct rohc_decomp *const decomp,
                                              const rohc_decomp_features_t features);
bool                 rohc_decomp_profile_enabled(const struct rohc_decomp *const decomp,
                                                 const rohc_profile_t profile);
bool                 rohc_decomp_enable_profile(struct rohc_decomp *const decomp,
                                                const rohc_profile_t profile);
bool                 rohc_decomp_disable_profile(struct rohc_decomp *const decomp,
                                                 const rohc_profile_t profile);
bool                 rohc_decomp_enable_profiles(struct rohc_decomp *const decomp,
                                                  ...);
bool                 rohc_decomp_disable_profiles(struct rohc_decomp *const decomp,
                                                   ...);
bool                 rohc_decomp_set_traces_cb2(struct rohc_decomp * decomp,
                                                rohc_trace_callback2_t callback,
                                                void *const priv_ctxt);
\fP
.fi
.RE
.SH STRUCTURES
.SS "The ROHC decompressor states"
.PP
.sp
.PP 
The different ROHC operation states at decompressor as defined in section 4.3.2 of RFC 3095.
.sp
.RS
.nf
enum \fBrohc_decomp_state_t\fP {
  \fIROHC_DECOMP_STATE_NC\fP, /* The No Context state */
  \fIROHC_DECOMP_STATE_SC\fP, /* The Static Context state */
  \fIROHC_DECOMP_STATE_FC\fP, /* The Full Context state */
};
.fi
.RE
.SS "The different features of the ROHC decompressor"
.PP
.sp
.PP 
Features for the ROHC decompressor control whether mechanisms defined as optional by RFCs are enabled or not. They can be set or unset with the function \fBrohc_decomp_set_features\fP.
.sp
.RS
.nf
enum \fBrohc_decomp_features_t\fP {
  \fIROHC_DECOMP_FEATURE_NONE\fP,         /* No feature at all */
  \fIROHC_DECOMP_FEATURE_CRC_REPAIR\fP,   /* Attempt packet repair in case of CRC failure */
  \fIROHC_DECOMP_FEATURE_COMPAT_1_6_x\fP, /* Be compatible with 1.6.x versions */
};
.fi
.RE
.SS "Some information about the last decompressed packet"
.PP
.sp
.PP 
The structure is used by the \fBrohc_decomp_get_last_packet_info\fP function to store some information about the last decompressed packet.
.PP 
Versioning works as follow:
.PP 
.RS
.PP 
\(bu The \fBversion_major\fP field defines the compatibility level. If the major number given by user does not match the one expected by the library, an error is returned.
.PP 
\(bu The \fBversion_minor\fP field defines the extension level. If the minor number given by user does not match the one expected by the library, only the fields supported in that minor version will be filled by \fBrohc_decomp_get_last_packet_info\fP.
.PP 
.RE
.PP 
Notes for developers:
.PP 
.RS
.PP 
\(bu Increase the major version if a field is removed.
.PP 
\(bu Increase the major version if a field is added at the beginning or in the middle of the structure.
.PP 
\(bu Increase the minor version if a field is added at the very end of the structure.
.PP 
\(bu The version_major and version_minor fields must be located at the very beginning of the structure.
.PP 
\(bu The structure must be packed.
.PP 
.RE
.PP 
Supported versions:
.PP 
.RS
.PP 
\(bu Major 0 / Minor 0 contains: version_major, version_minor, context_mode, context_state, profile_id, nr_lost_packets, nr_misordered_packets, and is_duplicated
.PP 
\(bu Major 0 / Minor = 1 added: corrected_crc_failures, corrected_sn_wraparounds, corrected_wrong_sn_updates, and packet_type
.PP 
.RE
.sp
.RS
.nf
struct \fBrohc_decomp_last_packet_info_t\fP {
  unsigned short      \fIversion_major\fP;              /* The major version of this structure */
  unsigned short      \fIversion_minor\fP;              /* The minor version of this structure */
  rohc_mode_t         \fIcontext_mode\fP;               /* The mode of the last context used by the compressor */
  rohc_decomp_state_t \fIcontext_state\fP;              /* The state of the last context used by the compressor */
  int                 \fIprofile_id\fP;                 /* The profile ID of the last context used by the compressor */
  unsigned long       \fInr_lost_packets\fP;            /* The number of (possible) lost packet(s) before last packet */
  unsigned long       \fInr_misordered_packets\fP;      /* The number of packet(s) before the last packet if late */
  bool                \fIis_duplicated\fP;              /* Is last packet a (possible) duplicated packet? */
  unsigned long       \fIcorrected_crc_failures\fP;     /* The number of successful corrections upon CRC failure */
  unsigned long       \fIcorrected_sn_wraparounds\fP;   /* The number of successful corrections of SN wraparound upon CRC failure */
  unsigned long       \fIcorrected_wrong_sn_updates\fP; /* The number of successful corrections of incorrect SN updates upon CRC failure */
  rohc_packet_t       \fIpacket_type\fP;                /* The type of the last decompressed ROHC packet */
};
.fi
.RE
.SS "Some general information about the decompressor"
.PP
.sp
.PP 
The structure is used by the \fBrohc_decomp_get_general_info\fP function to store some general information about the decompressor.
.PP 
Versioning works as follow:
.PP 
.RS
.PP 
\(bu The \fBversion_major\fP field defines the compatibility level. If the major number given by user does not match the one expected by the library, an error is returned.
.PP 
\(bu The \fBversion_minor\fP field defines the extension level. If the minor number given by user does not match the one expected by the library, only the fields supported in that minor version will be filled by \fBrohc_decomp_get_general_info\fP.
.PP 
.RE
.PP 
Notes for developers:
.PP 
.RS
.PP 
\(bu Increase the major version if a field is removed.
.PP 
\(bu Increase the major version if a field is added at the beginning or in the middle of the structure.
.PP 
\(bu Increase the minor version if a field is added at the very end of the structure.
.PP 
\(bu The version_major and version_minor fields must be located at the very beginning of the structure.
.PP 
\(bu The structure must be packed.
.PP 
.RE
.PP 
Supported versions:
.PP 
.RS
.PP 
\(bu major 0 and minor = 0 contains: version_major, version_minor, contexts_nr, packets_nr, comp_bytes_nr, and uncomp_bytes_nr.
.PP 
.RE
.sp
.RS
.nf
struct \fBrohc_decomp_general_info_t\fP {
  unsigned short \fIversion_major\fP;   /* The major version of this structure */
  unsigned short \fIversion_minor\fP;   /* The minor version of this structure */
  size_t         \fIcontexts_nr\fP;     /* The number of contexts used by the decompressor */
  unsigned long  \fIpackets_nr\fP;      /* The number of packets processed by the decompressor */
  unsigned long  \fIcomp_bytes_nr\fP;   /* The number of compressed bytes received by the decompressor */
  unsigned long  \fIuncomp_bytes_nr\fP; /* The number of uncompressed bytes produced by the decompressor */
};
.fi
.RE
.SS "A network buffer for the ROHC library"
.PP
.sp
.PP 
May represent one uncompressed packet, one ROHC packet, or a ROHC feedback.
.PP 
The network buffer does not contain the packet data itself. It only has a pointer on it. This is designed this way for performance reasons: no copy required to initialize a network buffer, the struct is small and may be passed as copy to function.
.PP 
The network buffer is able to keep some free space at its beginning. The unused space at the beginning of the buffer may be used to prepend a network header at the very end of the packet handling.
.PP 
The beginning of the network buffer may also be shifted forward with the \fBrohc_buf_pull\fP function or shifted backward with the \fBrohc_buf_push\fP function. This is useful when parsing a network packet (once bytes are read, shift them forward) for example.
.PP 
The network buffer may be initialized manually (see below) or with the helper functions \fBrohc_buf_init_empty\fP or \fBrohc_buf_init_full\fP...
.PP 
...
.PP 
 
.sp
.RS
.nf
struct \fBrohc_buf\fP {
  struct rohc_ts \fItime\fP;    /* The timestamp associated to the data */
  uint8_t       *\fIdata\fP;    /* The buffer data */
  size_t         \fImax_len\fP; /* The maximum length of the buffer */
  size_t         \fIoffset\fP;  /* The offset for the beginning of the data */
  size_t         \fIlen\fP;     /* The data length (in bytes) */
};
.fi
.RE
.SH SEE ALSO
.BR rohc_decomp_new2 (3),
.BR rohc_decomp_free (3),
.BR rohc_decompress3 (3),
.BR rohc_decomp_get_state_descr (3),
.BR rohc_decomp_get_last_packet_info (3),
.BR rohc_decomp_get_general_info (3),
.BR rohc_decomp_get_cid_type (3),
.BR rohc_decomp_get_max_cid (3),
.BR rohc_decomp_set_mrru (3),
.BR rohc_decomp_get_mrru (3),
.BR rohc_decomp_set_features (3),
.BR rohc_decomp_profile_enabled (3),
.BR rohc_decomp_enable_profile (3),
.BR rohc_decomp_disable_profile (3),
.BR rohc_decomp_enable_profiles (3),
.BR rohc_decomp_disable_profiles (3),
.BR rohc_decomp_set_traces_cb2 (3)
