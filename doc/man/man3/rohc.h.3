.\" File automatically generated by doxy2man0.1
.\" Generation date: dim. sept. 7 2014
.TH rohc.h 3 2014-09-07 "ROHC" "ROHC library Programmer's Manual"
.SH "NAME"
rohc.h \- The ROHC compressor/decompressor common API
.SH SYNOPSIS
.nf
.B #include <rohc/rohc.h>
.fi
.SH DESCRIPTION
.PP 
The common API of the ROHC library allows a program to print the version of the ROHC library, or retrieve the description of ROHC modes and packets. No initialization is required. 
.PP
.sp
.RS
.nf
\fB
bool         rohc_buf_is_malformed(const struct rohc_buf buf);
bool         rohc_buf_is_empty(const struct rohc_buf buf);
void         rohc_buf_pull(struct rohc_buf *const buf,
                           const size_t offset);
void         rohc_buf_push(struct rohc_buf *const buf,
                           const size_t offset);
size_t       rohc_buf_avail_len(const struct rohc_buf buf);
uint8_t     *rohc_buf_data(const struct rohc_buf buf);
uint8_t     *rohc_buf_data_at(const struct rohc_buf buf,
                              const size_t offset);
void         rohc_buf_prepend(struct rohc_buf *const buf,
                              const uint8_t *const data,
                              const size_t len);
void         rohc_buf_append(struct rohc_buf *const buf,
                             const uint8_t *const data,
                             const size_t len);
void         rohc_buf_append_buf(struct rohc_buf *const dst,
                                 const struct rohc_buf src);
void         rohc_buf_reset(struct rohc_buf *const buf);
char        *rohc_version(void);
const char  *rohc_strerror(const rohc_status_t status);
const char  *rohc_get_mode_descr(const rohc_mode_t mode);
const char  *rohc_get_profile_descr(const rohc_profile_t profile);
const char  *rohc_get_packet_descr(const rohc_packet_t packet_type);
const char  *rohc_get_ext_descr(const rohc_ext_t ext_type);
\fP
.fi
.RE
.SH STRUCTURES
.SS "The status code of several functions in the library API"
.PP
.sp
.sp
.RS
.nf
enum \fBrohc_status_t\fP {
  \fIROHC_STATUS_OK\fP,               /* The action was successful */
  \fIROHC_STATUS_SEGMENT\fP,          /* The action was successful but packet needs to be segmented */
  \fIROHC_STATUS_MALFORMED\fP,        /* The action failed due to a malformed packet */
  \fIROHC_STATUS_NO_CONTEXT\fP,       /* The action failed because no matching context exists */
  \fIROHC_STATUS_BAD_CRC\fP,          /* The action failed due to a CRC failure */
  \fIROHC_STATUS_OUTPUT_TOO_SMALL\fP, /* The action failed because output buffer is too small */
  \fIROHC_STATUS_ERROR\fP,            /* The action encountered an undefined problem */
};
.fi
.RE
.SS "ROHC operation modes"
.PP
.sp
.PP 
The different ROHC operation modes as defined in section 4.4 of RFC 3095.
.PP 
If you add a new operation mode, please also add the corresponding textual description in \fBrohc_get_mode_descr\fP.
.sp
.RS
.nf
enum \fBrohc_mode_t\fP {
  \fIROHC_U_MODE\fP, /* The Unidirectional mode (U-mode) */
  \fIROHC_O_MODE\fP, /* The Bidirectional Optimistic mode (O-mode) */
  \fIROHC_R_MODE\fP, /* The Bidirectional Reliable mode (R-mode) */
};
.fi
.RE
.SS "The different types of Context IDs (CID)"
.PP
.sp
.PP 
CID values shall be in the range [0, \fBROHC_LARGE_CID_MAX\fPCID value shall be in the range [0, \fBROHC_SMALL_CID_MAX\fPThe different types of Context IDs (CID) a ROHC compressor or a ROHC decompressor may use.
.PP 
Possible values are: 
.PP 
.RS
.PP 
\(bu \fBROHC_LARGE_CID\fP : large CID means that a ROHC compressor or a ROHC decompressor may identify contexts with IDs in the range [0, \fBROHC_LARGE_CID_MAX\fP ], ie. it may uniquely identify at most \fBROHC_LARGE_CID_MAX\fP + 1 streams. 
.PP 
\(bu \fBROHC_SMALL_CID\fP : small CID means that a ROHC compressor or a ROHC decompressor may identify contexts with IDs in the range [0, \fBROHC_SMALL_CID_MAX\fP ], ie. it may uniquely identify at most \fBROHC_SMALL_CID_MAX\fP + 1 streams.
.PP 
.RE
.PP 
In short, you choose the CID type in function of the number of simultaneous streams you have to compress efficiently.
.sp
.RS
.nf
enum \fBrohc_cid_type_t\fP {
  \fIROHC_LARGE_CID\fP, /* The context uses large CID. */
  \fIROHC_SMALL_CID\fP, /* The context uses small CID. */
};
.fi
.RE
.SS "The different ROHC compression/decompression profiles"
.PP
.sp
.PP 
If you add a new compression/decompression profile, please also add the corresponding textual description in \fBrohc_get_profile_descr\fP.
.sp
.RS
.nf
enum \fBrohc_profile_t\fP {
  \fIROHC_PROFILE_UNCOMPRESSED\fP, /* The ROHC Uncompressed profile (RFC 3095, section 5.10) */
  \fIROHC_PROFILE_RTP\fP,          /* The ROHC RTP profile (RFC 3095, section 8) */
  \fIROHC_PROFILE_UDP\fP,          /* The ROHC UDP profile (RFC 3095, section 5.11) */
  \fIROHC_PROFILE_ESP\fP,          /* The ROHC ESP profile (RFC 3095, section 5.12) */
  \fIROHC_PROFILE_IP\fP,           /* The ROHC IP-only profile (RFC 3843, section 5) */
  \fIROHC_PROFILE_TCP\fP,          /* The ROHC TCP profile (RFC 4996) */
  \fIROHC_PROFILE_UDPLITE\fP,      /* The ROHC UDP-Lite profile (RFC 4019, section 7) */
};
.fi
.RE
.SS "The different levels of the traces"
.PP
.sp
.PP 
Used for the \fBlevel\fP parameter of the \fBrohc_trace_callback2_t\fP user-defined callback.
.sp
.RS
.nf
enum \fBrohc_trace_level_t\fP {
  \fIROHC_TRACE_DEBUG\fP,     /* Print debug traces */
  \fIROHC_TRACE_INFO\fP,      /* Print info (or lower) traces */
  \fIROHC_TRACE_WARNING\fP,   /* Print warning (or lower) traces */
  \fIROHC_TRACE_ERROR\fP,     /* Print error (or lower) traces */
  \fIROHC_TRACE_LEVEL_MAX\fP, /* The maximum number of trace levels */
};
.fi
.RE
.SS "The different entities concerned by the traces"
.PP
.sp
.PP 
Used for the source \fBentity\fP parameter of the \fBrohc_trace_callback2_t\fP user-defined callback.
.sp
.RS
.nf
enum \fBrohc_trace_entity_t\fP {
  \fIROHC_TRACE_COMP\fP,       /* Compressor traces */
  \fIROHC_TRACE_DECOMP\fP,     /* Decompressor traces */
  \fIROHC_TRACE_ENTITY_MAX\fP, /* The maximum number of trace entities */
};
.fi
.RE
.SS "The function prototype for the trace callback"
.PP
.sp
.PP 
User-defined function that is called by the ROHC library every time it wants to print something, from errors to debug. User may thus decide what traces are interesting (filter on \fBlevel\fP, source \fBentity\fP, or \fBprofile\fP) and what to do with them (print on console, storage in file, syslog...).
.PP 
The user-defined function is set by calling: 
.PP 
.RS
.PP 
\(bu function \fBrohc_comp_set_traces_cb2\fP for a ROHC compressor, 
.PP 
\(bu function \fBrohc_decomp_set_traces_cb2\fP for a ROHC decompressor.
.PP 
.RE
.PP 
Both functions accept the NULL value to fully disable tracing.
.sp
.RS
.nf
typedef void (*\fBrohc_trace_callback2_t\fP) (
    \fBvoid *const                priv_ctxt\fP, /* An optional private context, may be NULL */
    \fBconst rohc_trace_level_t   level\fP,     /* The level of the message, */
    \fBconst rohc_trace_entity_t  entity\fP,    /* The entity concerned by the traces */
    \fBconst int                  profile\fP,   /* The number of the profile concerned by the message */
    \fBconst char *const          format\fP     /* The format string for the trace message */
.fi
);
.fi
.SS "A network buffer for the ROHC library"
.PP
.sp
.PP 
May represent one uncompressed packet, one ROHC packet, or a ROHC feedback.
.PP 
The network buffer does not contain the packet data itself. It only has a pointer on it. This is designed this way for performance reasons: no copy required to initialize a network buffer, the struct is small and may be passed as copy to function.
.PP 
The network buffer is able to keep some free space at its beginning. The unused space at the beginning of the buffer may be used to prepend a network header at the very end of the packet handling.
.PP 
The beginning of the network buffer may also be shifted forward with the \fBrohc_buf_pull\fP function or shifted backward with the \fBrohc_buf_push\fP function. This is useful when parsing a network packet (once bytes are read, shift them forward) for example.
.PP 
The network buffer may be initialized manually (see below) or with the helper functions \fBrohc_buf_init_empty\fP or \fBrohc_buf_init_full\fP...
.PP 
...
.PP 
 
.sp
.RS
.nf
struct \fBrohc_buf\fP {
  struct rohc_ts \fItime\fP;    /* The timestamp associated to the data */
  uint8_t       *\fIdata\fP;    /* The buffer data */
  size_t         \fImax_len\fP; /* The maximum length of the buffer */
  size_t         \fIoffset\fP;  /* The offset for the beginning of the data */
  size_t         \fIlen\fP;     /* The data length (in bytes) */
};
.fi
.RE
.SH SEE ALSO
.BR rohc_buf_is_malformed (3),
.BR rohc_buf_is_empty (3),
.BR rohc_buf_pull (3),
.BR rohc_buf_push (3),
.BR rohc_buf_avail_len (3),
.BR rohc_buf_data (3),
.BR rohc_buf_data_at (3),
.BR rohc_buf_prepend (3),
.BR rohc_buf_append (3),
.BR rohc_buf_append_buf (3),
.BR rohc_buf_reset (3),
.BR rohc_version (3),
.BR rohc_strerror (3),
.BR rohc_get_mode_descr (3),
.BR rohc_get_profile_descr (3),
.BR rohc_get_packet_descr (3),
.BR rohc_get_ext_descr (3)
